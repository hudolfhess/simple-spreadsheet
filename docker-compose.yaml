version: "3.8"

services:
  # Next.js Application
  nextjs-app:
    build:
      context: . # Looks for Dockerfile in the current directory
      dockerfile: Dockerfile
      # You can pass build arguments to Dockerfile if needed:
      # args:
      #   NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL_FROM_ENV}
    container_name: app
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000
    environment:
      NODE_ENV: development
      POSTGRES_DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}"
    # MONGODB_URI: "mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongo_db:27017/${MONGO_DATABASE}?authSource=admin&directConnection=true"
    depends_on:
      - postgres_db
    #   - mongo_db
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next

  # PostgreSQL Database
  postgres_db:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always

  # # MongoDB Database
  # mongo_db:
  #   image: mongo:6-jammy # Using a specific version is good practice
  #   container_name: mongo_db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-mongoadmin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-mongopass}
  #     MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-mymongodb} # This db will be created
  #   volumes:
  #     - mongodata:/data/db # Persist data
  #     # You can add an init script here if needed:
  #     # - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  #   ports:
  #     - "27017:27017" # Expose MongoDB port to host (optional, for external tools)
  #   restart: always
volumes:
  pgdata: # Named volume for PostgreSQL data
#   mongodata: # Named volume for MongoDB data
