generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/postgresql"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // @@unique([identifier, token])
  // For MongoDB, if identifier is not an ObjectId, you might need a composite id or adjust the type.
  // However, NextAuth's Email provider typically uses the email string as the identifier for VerificationToken.
  // So, for MongoDB, you might want:
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  // identifier String
  // token      String   @unique
  // expires    DateTime
  // @@unique([identifier, token])
  // Check the Prisma adapter documentation for the most up-to-date VerificationToken model for MongoDB.
  // For simplicity with Email provider, the default identifier/token structure usually works well.
}